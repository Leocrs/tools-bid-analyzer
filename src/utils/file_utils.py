import pandas as pd
import streamlit as st
from pathlib import Path
import logging
import openai
import os
from dotenv import load_dotenv
import PyPDF2
from io import BytesIO

# Carrega vari√°veis de ambiente
load_dotenv()

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configura√ß√£o OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

def validate_file_type(file):
    """Valida o tipo de arquivo enviado"""
    allowed_extensions = ['.pdf', '.xlsx', '.xls', '.docx']
    file_extension = Path(file.name).suffix.lower()
    return file_extension in allowed_extensions

def extract_text_from_pdf(file):
    """Extrai texto de arquivo PDF"""
    try:
        file.seek(0)
        reader = PyPDF2.PdfReader(BytesIO(file.getvalue()))
        text = ""
        for page in reader.pages:
            text += page.extract_text() + "\n"
        return text
    except Exception as e:
        logger.error(f"Erro ao extrair texto do PDF: {e}")
        return ""

def extract_text_from_excel(file):
    """Extrai dados de arquivo Excel em formato texto"""
    try:
        file.seek(0)
        df = pd.read_excel(file)
        # Converte DataFrame para texto estruturado
        text = f"Arquivo Excel com {len(df)} linhas e {len(df.columns)} colunas:\n\n"
        text += f"Colunas: {', '.join(df.columns)}\n\n"
        text += df.to_string(index=False)
        return text
    except Exception as e:
        logger.error(f"Erro ao extrair dados do Excel: {e}")
        return ""

def analyze_with_openai(documents_text, file_types):
    """Analisa documentos usando OpenAI GPT"""
    try:
        # Prompt espec√≠fico para an√°lise de BID
        system_prompt = """
        Voc√™ √© um agente de suprimentos da Tools Engenharia especializado em an√°lise de BID.

        ‚ö†Ô∏è N√ÉO DEVE iniciar nenhuma an√°lise automaticamente.

        üìå Seu trabalho √© seguir estas etapas:

        **Primeira Parte:**
        - Avaliar se o mapa em Excel est√° igual √†s propostas
        - Verificar se as propostas est√£o equalizadas

        **Segunda Etapa:**
        - Avaliar se as propostas est√£o aderentes ao projeto
        - Identificar inconsist√™ncias ou omiss√µes

        **Terceira Etapa:**
        - Montar uma base hist√≥rica com servi√ßos j√° contratados para servir como refer√™ncia
        - Comparar com dados hist√≥ricos quando dispon√≠vel

        üîé Para cada an√°lise:
        1. Confirme que o mapa foi recebido
        2. Valide se cont√©m:
           ‚Ä¢ Itens e quantidades
           ‚Ä¢ Empresas participantes
           ‚Ä¢ Valores unit√°rios
        3. Compare valores unit√°rios entre fornecedores
        4. Identifique o menor pre√ßo por item
        5. Avalie viabilidade de contrata√ß√£o por mix ou fornecedor √∫nico
        6. Aponte inconsist√™ncias ou omiss√µes

        ‚úÖ Sua linguagem deve ser t√©cnica e objetiva
        ‚ùå Nunca assuma dados n√£o fornecidos
        """

        user_content = f"""
        Documentos recebidos para an√°lise:
        Tipos de arquivo: {', '.join(file_types)}

        Conte√∫do dos documentos:
        {documents_text}

        Por favor, realize a an√°lise completa seguindo as tr√™s etapas definidas.
        """

        response = openai.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_content}
            ],
            max_tokens=1500,
            temperature=0.3
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        logger.error(f"Erro na an√°lise OpenAI: {e}")
        return f"‚ùå Erro ao processar an√°lise com IA: {str(e)}"

def analyze_excel_content(file):
    """Analisa conte√∫do de arquivo Excel para identificar mapa de concorr√™ncia"""
    try:
        df = pd.read_excel(file)
        
        # Verifica se parece com um mapa de concorr√™ncia
        columns = df.columns.str.lower()
        
        # Palavras-chave que indicam mapa de concorr√™ncia
        keywords = ['item', 'descri√ß√£o', 'quantidade', 'pre√ßo', 'valor', 'fornecedor', 'empresa']
        found_keywords = [kw for kw in keywords if any(kw in col for col in columns)]
        
        validations = []
        
        if len(found_keywords) >= 3:
            validations.append("‚úÖ Estrutura de mapa de concorr√™ncia identificada")
            validations.append(f"‚úÖ Colunas relevantes encontradas: {', '.join(found_keywords)}")
            validations.append(f"‚úÖ Total de itens/linhas: {len(df)}")
            
            # Verifica se h√° dados num√©ricos (valores)
            numeric_cols = df.select_dtypes(include=['number']).columns
            if len(numeric_cols) > 0:
                validations.append(f"‚úÖ Colunas com valores num√©ricos: {len(numeric_cols)}")
            else:
                validations.append("‚ö†Ô∏è Poucas colunas num√©ricas identificadas")
                
            return True, validations
        else:
            validations.append("‚ö†Ô∏è Estrutura de mapa de concorr√™ncia n√£o clara")
            validations.append(f"‚ö†Ô∏è Apenas {len(found_keywords)} palavras-chave encontradas")
            return False, validations
            
    except Exception as e:
        logger.error(f"Erro ao analisar Excel: {e}")
        return False, [f"‚ùå Erro ao processar arquivo Excel: {str(e)}"]

def analyze_pdf_content(file):
    """Analisa conte√∫do de arquivo PDF"""
    try:
        text = extract_text_from_pdf(file)
        file_size = len(file.getvalue())
        
        if file_size > 0 and text:
            return True, [
                "‚úÖ Arquivo PDF recebido e processado",
                f"‚úÖ Tamanho: {file_size/1024:.1f} KB",
                f"‚úÖ Texto extra√≠do: {len(text)} caracteres",
                "‚úÖ Pronto para an√°lise com IA"
            ]
        else:
            return False, ["‚ùå Arquivo PDF est√° vazio ou n√£o foi poss√≠vel extrair texto"]
    except Exception as e:
        logger.error(f"Erro ao analisar PDF: {e}")
        return False, [f"‚ùå Erro ao processar arquivo PDF: {str(e)}"]

def handle_uploaded_files(files):
    """Processa e valida arquivos enviados pelo usu√°rio"""
    if not files:
        return {
            "success": False,
            "message": "Nenhum arquivo enviado",
            "validations": [],
            "ai_analysis": ""
        }
    
    all_validations = []
    has_map = False
    has_proposals = False
    documents_text = ""
    file_types = []
    
    for file in files:
        file_name = file.name.lower()
        file_extension = Path(file.name).suffix.lower()
        file_types.append(f"{file.name} ({file_extension})")
        
        # Reset file pointer
        file.seek(0)
        
        if not validate_file_type(file):
            all_validations.append(f"‚ùå {file.name}: Tipo de arquivo n√£o suportado")
            continue
        
        all_validations.append(f"üìÅ Analisando: {file.name}")
        
        # Extra√ß√£o de texto para an√°lise IA
        if file_extension in ['.xlsx', '.xls']:
            text_content = extract_text_from_excel(file)
            is_valid, validations = analyze_excel_content(file)
            all_validations.extend(validations)
            
            # Verifica se √© um mapa de concorr√™ncia
            if 'mapa' in file_name or 'concorrencia' in file_name or is_valid:
                has_map = True
                all_validations.append("üéØ Identificado como: MAPA DE CONCORR√äNCIA")
            else:
                has_proposals = True
                all_validations.append("üìã Identificado como: PROPOSTA/DOCUMENTO AUXILIAR")
                
        elif file_extension == '.pdf':
            text_content = extract_text_from_pdf(file)
            is_valid, validations = analyze_pdf_content(file)
            all_validations.extend(validations)
            
            if 'mapa' in file_name or 'concorrencia' in file_name:
                has_map = True
                all_validations.append("üéØ Identificado como: MAPA DE CONCORR√äNCIA")
            else:
                has_proposals = True
                all_validations.append("üìã Identificado como: PROPOSTA/DOCUMENTO T√âCNICO")
        
        # Adiciona conte√∫do extra√≠do para an√°lise IA
        if text_content:
            documents_text += f"\n\n=== {file.name} ===\n{text_content}\n"
        
        all_validations.append("---")
    
    # An√°lise com IA
    ai_analysis = ""
    if documents_text and openai.api_key:
        all_validations.append("ü§ñ Iniciando an√°lise com IA...")
        ai_analysis = analyze_with_openai(documents_text, file_types)
    elif not openai.api_key:
        ai_analysis = "‚ö†Ô∏è Chave da OpenAI n√£o configurada. Adicione sua chave no arquivo .env"
    
    # Valida√ß√£o final
    if not has_map:
        return {
            "success": False,
            "message": "‚ö†Ô∏è MAPA DE CONCORR√äNCIA n√£o identificado. Por favor, envie um arquivo contendo o mapa de concorr√™ncia com itens, quantidades e valores.",
            "validations": all_validations,
            "ai_analysis": ai_analysis
        }
    
    # Sucesso na valida√ß√£o
    success_message = "‚úÖ Documentos validados com sucesso!"
    if has_proposals:
        success_message += " Mapa de concorr√™ncia e propostas/documentos auxiliares identificados."
    else:
        success_message += " Mapa de concorr√™ncia identificado. Voc√™ pode enviar propostas comerciais adicionais para an√°lise comparativa."
    
    return {
        "success": True,
        "message": success_message,
        "validations": all_validations,
        "has_map": has_map,
        "has_proposals": has_proposals,
        "ai_analysis": ai_analysis
    }
